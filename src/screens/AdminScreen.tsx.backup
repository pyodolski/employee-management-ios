import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  RefreshControl,
  ActivityIndicator,
} from "react-native";
import { supabase } from "../config/supabase";
import { format } from "date-fns";
import { ko } from "date-fns/locale";

interface WorkLog {
  id: string;
  user_id: string;
  date: string;
  clock_in: string | null;
  clock_out: string | null;
  status: string;
  work_type?: string;
  day_off_reason?: string;
  created_at: string;
  profiles: {
    full_name: string;
    email: string;
  };
}

interface Employee {
  id: string;
  full_name: string;
  email: string;
  role: string;
  hourly_wage: number;
  created_at: string;
}

interface MonthlyStats {
  totalHours: number;
  workDays: number;
  expectedPay: number;
}

export default function AdminScreen() {
  const [activeTab, setActiveTab] = useState<"approval" | "employees">(
    "approval"
  );
  const [pendingLogs, setPendingLogs] = useState<WorkLog[]>([]);
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [processingIds, setProcessingIds] = useState<Set<string>>(new Set());

  useEffect(() => {
    fetchData();
  }, [activeTab]);

  const fetchData = async () => {
    if (activeTab === "approval") {
      await fetchPendingLogs();
    } else {
      await fetchEmployees();
    }
  };

  const fetchPendingLogs = async () => {
    try {
      const { data, error } = await supabase
        .from("work_logs")
        .select(
          `
          *,
          profiles (
            full_name,
            email
          )
        `
        )
        .eq("status", "pending")
        .order("created_at", { ascending: false });

      if (error) throw error;
      setPendingLogs(data || []);
    } catch (error: any) {
      Alert.alert("오류", error.message);
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  const fetchEmployees = async () => {
    try {
      const { data, error } = await supabase
        .from("profiles")
        .select("*")
        .eq("role", "employee")
        .order("created_at", { ascending: false });

      if (error) throw error;
      setEmployees(data || []);
    } catch (error: any) {
      Alert.alert("오류", error.message);
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  const handleApproval = async (logId: string) => {
    setProcessingIds((prev) => new Set(prev).add(logId));

    try {
      const { error } = await supabase
        .from("work_logs")
        .update({ status: "approved" })
        .eq("id", logId);

      if (error) throw error;

      Alert.alert("성공", "근무가 승인되었습니다.");
      setPendingLogs((prev) => prev.filter((log) => log.id !== logId));
    } catch (error: any) {
      Alert.alert("오류", error.message);
    } finally {
      setProcessingIds((prev) => {
        const newSet = new Set(prev);
        newSet.delete(logId);
        return newSet;
      });
    }
  };

  const handleReject = async (logId: string) => {
    Alert.alert("근무 거절", "이 근무를 거절하시겠습니까?", [
      { text: "취소", style: "cancel" },
      {
        text: "거절",
        style: "destructive",
        onPress: async () => {
          setProcessingIds((prev) => new Set(prev).add(logId));

          try {
            const { error } = await supabase
              .from("work_logs")
              .update({ status: "rejected" })
              .eq("id", logId);

            if (error) throw error;

            Alert.alert("완료", "근무가 거절되었습니다.");
            setPendingLogs((prev) => prev.filter((log) => log.id !== logId));
          } catch (error: any) {
            Alert.alert("오류", error.message);
          } finally {
            setProcessingIds((prev) => {
              const newSet = new Set(prev);
              newSet.delete(logId);
              return newSet;
            });
          }
        },
      },
    ]);
  };

  const calculateWorkHours = (
    clockIn: string | null,
    clockOut: string | null
  ) => {
    if (!clockIn || !clockOut) return 0;

    const [inHour, inMin] = clockIn.split(":").map(Number);
    const [outHour, outMin] = clockOut.split(":").map(Number);

    const inMinutes = inHour * 60 + inMin;
    const outMinutes = outHour * 60 + outMin;

    return ((outMinutes - inMinutes) / 60).toFixed(1);
  };

  const onRefresh = () => {
    setRefreshing(true);
    fetchData();
  };

  const handleLogout = async () => {
    Alert.alert("로그아웃", "로그아웃 하시겠습니까?", [
      { text: "취소", style: "cancel" },
      {
        text: "로그아웃",
        style: "destructive",
        onPress: async () => {
          await supabase.auth.signOut();
        },
      },
    ]);
  };

  const getRoleBadge = (role: string) => {
    switch (role) {
      case "super":
        return { text: "슈퍼관리자", color: "#ef4444" };
      case "admin":
        return { text: "관리자", color: "#3b82f6" };
      default:
        return { text: "직원", color: "#6b7280" };
    }
  };

  return (
    <View style={styles.container}>
      {/* 탭 네비게이션 */}
      <View style={styles.tabContainer}>
        <TouchableOpacity
          style={[styles.tab, activeTab === "approval" && styles.activeTab]}
          onPress={() => setActiveTab("approval")}
        >
          <Text
            style={[
              styles.tabText,
              activeTab === "approval" && styles.activeTabText,
            ]}
          >
            승인 관리
          </Text>
          {pendingLogs.length > 0 && (
            <View style={styles.badge}>
              <Text style={styles.badgeText}>{pendingLogs.length}</Text>
            </View>
          )}
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === "employees" && styles.activeTab]}
          onPress={() => setActiveTab("employees")}
        >
          <Text
            style={[
              styles.tabText,
              activeTab === "employees" && styles.activeTabText,
            ]}
          >
            직원 관리
          </Text>
        </TouchableOpacity>
      </View>

      <ScrollView
        style={styles.content}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        {loading ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color="#3b82f6" />
          </View>
        ) : activeTab === "approval" ? (
          // 승인 관리 탭
          pendingLogs.length === 0 ? (
            <View style={styles.emptyState}>
              <Text style={styles.emptyIcon}>✅</Text>
              <Text style={styles.emptyText}>모든 근무가 처리되었습니다!</Text>
              <Text style={styles.emptySubText}>
                승인 대기 중인 근무 내역이 없습니다.
              </Text>
            </View>
          ) : (
            pendingLogs.map((log) => {
              const isOffDay = log.work_type === "day_off";
              const isProcessing = processingIds.has(log.id);

              return (
                <View
                  key={log.id}
                  style={[styles.card, isOffDay && styles.offDayCard]}
                >
                  {/* 직원 정보 */}
                  <View style={styles.cardHeader}>
                    <View>
                      <Text style={styles.employeeName}>
                        {log.profiles?.full_name || "이름 없음"}
                      </Text>
                      <Text style={styles.employeeEmail}>
                        {log.profiles?.email}
                      </Text>
                    </View>
                    {isOffDay && (
                      <View style={styles.offDayBadge}>
                        <Text style={styles.offDayBadgeText}>휴무 신청</Text>
                      </View>
                    )}
                  </View>

                  {/* 근무 정보 */}
                  <View style={styles.cardBody}>
                    <View style={styles.infoRow}>
                      <Text style={styles.infoLabel}>날짜</Text>
                      <Text style={styles.infoValue}>
                        {format(new Date(log.date), "yyyy년 MM월 dd일 (EEE)", {
                          locale: ko,
                        })}
                      </Text>
                    </View>
                    <View style={styles.infoRow}>
                      <Text style={styles.infoLabel}>
                        {isOffDay ? "유형" : "근무시간"}
                      </Text>
                      <Text style={styles.infoValue}>
                        {isOffDay
                          ? "휴무"
                          : `${log.clock_in} ~ ${log.clock_out}`}
                      </Text>
                    </View>
                    {!isOffDay && (
                      <View style={styles.infoRow}>
                        <Text style={styles.infoLabel}>총 시간</Text>
                        <Text style={styles.infoValue}>
                          {calculateWorkHours(log.clock_in, log.clock_out)}시간
                        </Text>
                      </View>
                    )}
                    {isOffDay && log.day_off_reason && (
                      <View style={styles.reasonBox}>
                        <Text style={styles.reasonLabel}>휴무 사유</Text>
                        <Text style={styles.reasonText}>
                          {log.day_off_reason}
                        </Text>
                      </View>
                    )}
                  </View>

                  {/* 액션 버튼 */}
                  <View style={styles.actionButtons}>
                    <TouchableOpacity
                      style={[
                        styles.approveButton,
                        isProcessing && styles.disabledButton,
                      ]}
                      onPress={() => handleApproval(log.id)}
                      disabled={isProcessing}
                    >
                      {isProcessing ? (
                        <ActivityIndicator color="#fff" size="small" />
                      ) : (
                        <Text style={styles.approveButtonText}>승인</Text>
                      )}
                    </TouchableOpacity>
                    <TouchableOpacity
                      style={[
                        styles.rejectButton,
                        isProcessing && styles.disabledButton,
                      ]}
                      onPress={() => handleReject(log.id)}
                      disabled={isProcessing}
                    >
                      {isProcessing ? (
                        <ActivityIndicator color="#fff" size="small" />
                      ) : (
                        <Text style={styles.rejectButtonText}>거절</Text>
                      )}
                    </TouchableOpacity>
                  </View>
                </View>
              );
            })
          )
        ) : // 직원 관리 탭
        employees.length === 0 ? (
          <View style={styles.emptyState}>
            <Text style={styles.emptyIcon}>👥</Text>
            <Text style={styles.emptyText}>등록된 직원이 없습니다</Text>
          </View>
        ) : (
          employees.map((employee) => {
            const roleBadge = getRoleBadge(employee.role);

            return (
              <View key={employee.id} style={styles.employeeCard}>
                <View style={styles.employeeHeader}>
                  <View>
                    <Text style={styles.employeeName}>
                      {employee.full_name}
                    </Text>
                    <Text style={styles.employeeEmail}>{employee.email}</Text>
                  </View>
                  <View
                    style={[
                      styles.roleBadge,
                      { backgroundColor: roleBadge.color + "20" },
                    ]}
                  >
                    <Text
                      style={[styles.roleBadgeText, { color: roleBadge.color }]}
                    >
                      {roleBadge.text}
                    </Text>
                  </View>
                </View>
                <Text style={styles.employeeDate}>
                  가입일: {format(new Date(employee.created_at), "yyyy-MM-dd")}
                </Text>
              </View>
            );
          })
        )}
      </ScrollView>

      {/* 로그아웃 버튼 */}
      <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
        <Text style={styles.logoutText}>로그아웃</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f5f5f5",
  },
  tabContainer: {
    flexDirection: "row",
    backgroundColor: "#fff",
    borderBottomWidth: 1,
    borderBottomColor: "#e5e7eb",
  },
  tab: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    paddingVertical: 16,
    gap: 8,
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: "#8b5cf6",
  },
  tabText: {
    fontSize: 16,
    color: "#6b7280",
    fontWeight: "500",
  },
  activeTabText: {
    color: "#8b5cf6",
    fontWeight: "600",
  },
  badge: {
    backgroundColor: "#ef4444",
    borderRadius: 10,
    paddingHorizontal: 6,
    paddingVertical: 2,
    minWidth: 20,
    alignItems: "center",
  },
  badgeText: {
    color: "#fff",
    fontSize: 12,
    fontWeight: "600",
  },
  content: {
    flex: 1,
    padding: 16,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    paddingTop: 100,
  },
  emptyState: {
    backgroundColor: "#fff",
    borderRadius: 16,
    padding: 40,
    alignItems: "center",
    marginTop: 20,
  },
  emptyIcon: {
    fontSize: 48,
    marginBottom: 16,
  },
  emptyText: {
    fontSize: 16,
    fontWeight: "600",
    color: "#374151",
    marginBottom: 8,
  },
  emptySubText: {
    fontSize: 14,
    color: "#6b7280",
  },
  card: {
    backgroundColor: "#fff",
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: "#fef3c7",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  offDayCard: {
    borderColor: "#bfdbfe",
    backgroundColor: "#eff6ff",
  },
  cardHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "flex-start",
    marginBottom: 12,
  },
  employeeName: {
    fontSize: 16,
    fontWeight: "600",
    color: "#1f2937",
    marginBottom: 4,
  },
  employeeEmail: {
    fontSize: 14,
    color: "#6b7280",
  },
  offDayBadge: {
    backgroundColor: "#3b82f6",
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
  },
  offDayBadgeText: {
    color: "#fff",
    fontSize: 12,
    fontWeight: "600",
  },
  cardBody: {
    gap: 8,
    marginBottom: 12,
  },
  infoRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  infoLabel: {
    fontSize: 14,
    color: "#6b7280",
  },
  infoValue: {
    fontSize: 14,
    fontWeight: "500",
    color: "#1f2937",
  },
  reasonBox: {
    backgroundColor: "#dbeafe",
    padding: 12,
    borderRadius: 8,
    marginTop: 8,
  },
  reasonLabel: {
    fontSize: 12,
    fontWeight: "600",
    color: "#1e40af",
    marginBottom: 4,
  },
  reasonText: {
    fontSize: 14,
    color: "#1e3a8a",
  },
  actionButtons: {
    flexDirection: "row",
    gap: 8,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: "#e5e7eb",
  },
  approveButton: {
    flex: 1,
    backgroundColor: "#10b981",
    padding: 12,
    borderRadius: 8,
    alignItems: "center",
  },
  approveButtonText: {
    color: "#fff",
    fontSize: 14,
    fontWeight: "600",
  },
  rejectButton: {
    flex: 1,
    backgroundColor: "#ef4444",
    padding: 12,
    borderRadius: 8,
    alignItems: "center",
  },
  rejectButtonText: {
    color: "#fff",
    fontSize: 14,
    fontWeight: "600",
  },
  disabledButton: {
    opacity: 0.6,
  },
  employeeCard: {
    backgroundColor: "#fff",
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  employeeHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "flex-start",
    marginBottom: 8,
  },
  roleBadge: {
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
  },
  roleBadgeText: {
    fontSize: 12,
    fontWeight: "600",
  },
  employeeDate: {
    fontSize: 12,
    color: "#9ca3af",
  },
  logoutButton: {
    backgroundColor: "#ef4444",
    padding: 15,
    margin: 16,
    borderRadius: 12,
  },
  logoutText: {
    color: "#fff",
    textAlign: "center",
    fontSize: 16,
    fontWeight: "600",
  },
});
